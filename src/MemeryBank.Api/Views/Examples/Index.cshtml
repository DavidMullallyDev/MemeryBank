@using MemeryBank.Core.Shared.Compoments.Pages;
@using static MemeryBank.Api.Models.Person
@* This makes this a strongly typed view as is it now strongly coupled with the List<Person> class *@
@model List<Person>
@{
    //Layout = "~/Views/Shared/_Layout.cshtml";
    // string appTitle = "Mememry Bank";
    Person person = new Person();
    person.FirstName = "dengo";
    person.LastName = "mullally";
    //person.DateOfBirth = null;
    person.DateOfBirth = new DateTime(1985, 1, 7);
    //person.PersonGender = Gender.Other;
    // List<Person> peoples = [
    //     new Person { FirstName = "doodles", LastName = "de brito pimentel", DateOfBirth = new DateTime(1991, 5, 17)},
    //     new Person { FirstName = "ifazihna", LastName = "mullally pimentel", DateOfBirth = new DateTime(2023, 3, 09)},
    //     new Person { FirstName = "dave", LastName = "mullally", DateOfBirth = new DateTime(1991, 5, 17)},
    //     new Person { FirstName = "aoife", LastName = "mullally pimentel", DateOfBirth = new DateTime(2023, 3, 09)},
    //     new Person { FirstName = "duda", LastName = "de brito pimentel", DateOfBirth = new DateTime(1991, 5, 17)}
    // ];


    // local function.. can be reused within this view
    string? GetAge(DateTime? dateOfBirth)
    {
        DateTime today = DateTime.Today;
        if (dateOfBirth.HasValue && dateOfBirth != DateTime.MinValue)
        {
            Person.Age = today.Year - dateOfBirth.Value.Year;
            if (today < dateOfBirth.Value.AddYears(Person.Age))
            {
                Person.Age--; // hasn't had birthday yet this year
            }
            return $"is {Person.Age} years old";
        }
        return "is of unspecified age";
    }
}


@functions {
    Person Person { get; set; } = new Person { FirstName = "abc", LastName = "def", DateOfBirth = new DateTime(1991, 5, 17) };
    static List<Person> peoples = [
        new Person { FirstName = "doodles", LastName = "de brito pimentel", DateOfBirth = new DateTime(1991, 5, 17)},
        new Person { FirstName = "ifazihna", LastName = "mullally pimentel", DateOfBirth = new DateTime(2023, 3, 09)},
        new Person { FirstName = "dave", LastName = "mullally", DateOfBirth = new DateTime(1991, 5, 17)},
        new Person { FirstName = "aoife", LastName = "mullally pimentel", DateOfBirth = new DateTime(2023, 3, 09)},
        new Person { FirstName = "duda", LastName = "de brito pimentel", DateOfBirth = new DateTime(1991, 5, 17)}
    ];
    string alertMessage = $"<script>alert('{peoples.Count} people were found')</script>";
    // here you can create methods and properties but they will only be accesible from within this view
    string? GetAgeMethod(DateTime? dateOfBirth)
    {
        DateTime today = DateTime.Today;
        if (dateOfBirth.HasValue && dateOfBirth != DateTime.MinValue)
        {
            Person.Age = today.Year - dateOfBirth.Value.Year;
            if (today < dateOfBirth.Value.AddYears(Person.Age))
            {
                Person.Age--; // hasn't had birthday yet this year
            }
            return $"is {Person.Age} years old";
        }
        return "is of unspecified age";
    }
}

<section id="hero">
    <button type="button" id="button-load">Load languages list</button>
    <div class="programming-languages-content"></div>
    @{
        //before ViewBag was introduced you had to acces the data by casting it
        //List<Person>? people = (List<Person>)ViewData["people"]!;
    }
    <ol>
        <li>@person.FirstName @person.LastName born @person.DateOfBirth @GetAge(person.DateOfBirth)</li>
        <li>@Person.FirstName @Person.LastName born @Person.DateOfBirth @GetAge(Person.DateOfBirth)</li>
        @* @foreach (Person per in ViewBag.people) *@
        @* the List<Person> model has been bound to the view using @Model List<Oerson> *@
        @if (Model != null)
        {
            foreach (Person per in Model)
            {
                @: This is an example of static text
                <text> This is another example of static text</text>
                @*or you could just put the text in any html tag*@
                <li>@per.FirstName @per.LastName born @per.DateOfBirth @GetAge(per.DateOfBirth) <a href="/person-details/@per.FirstName">Details</a> <a href="/person-with-product">With Product</a></li>
            }
        }
    </ol>
    @*show the script as sanitized text*@
    @alertMessage
    @*run the script*@
    @* @Html.Raw(alertMessage) ..if you want to execute javascript code*@ 
           
            <ul>
        <li>@person.FirstName @person.LastName born @person.DateOfBirth @GetAge(person.DateOfBirth)</li>
        <li>@Person.FirstName @Person.LastName born @Person.DateOfBirth @GetAge(Person.DateOfBirth)</li>
        @if (Model != null)
        {
            for (int i = 0; i < 2; i++)
            {
                Person pers = Model[i];
                <li>@pers.FirstName @pers.LastName born @pers.DateOfBirth  @GetAge(pers.DateOfBirth)</li>
            }
        }
    </ul>

    @* @if(GetAge(person.DateOfBirth).HasValue)
            {

                <h2>Your are @GetAge(person.DateOfBirth) years old.</h2>
            } else
            {
                <h2>Your date of birth is unknown</h2>
            } *@
    @switch (person.PersonGender)
    {
        case Gender.Male:
            <h2> Hey ya bollox</h2>
            ; break;
        case Gender.Female:

            <h2> Hey ya sandy vajayjay</h2>
            ; break;
        case Gender.Other:

            <h2> Hey ya sandy bollox</h2>
            ; break;
        default:

            <h2>Hey you ??</h2>
            ; break;

    }
    <p>This is a simple boilerplate for an HTML5 homepage.</p>
    <div class="box">
        @* 3 different ways to display a partial view *@
        @{
            ItemList itemList = new ItemList();
            itemList.ListTitle = "Countries";
            itemList.ListItems = new List<string>() { "France", "Portugal", "Italy" };
            itemList.IsOrderedList = false;
        }
        <partial name="_ListPartialView" model="itemList" /> @* returns content to the parent view so its data will be available in parent view*@
        @*<partial name="_ListPartialView" view-data="ViewData" />*@ @*if you want to sent some other object as viewData to the partial.. for example a subset of the given viewData*@

        @{
            // var myData = new ViewDataDictionary(ViewData);
            // myData["ListTitle"] = "Countries";
            //         myData["ListItems"] = new List<string> { "Ireland", "Germany","Spain", "Brazil"};
            //     }
            @await Html.PartialAsync("_ListPartialView", itemList) @* returns content to the parent view so its data will be available in parent view*@

            @*@await Html.PartialAsync("_ListPartialView", myData)*@
        }

        @{

            // myData["ListTitle"] = "Continents";
            // myData["ListItems"] = new List<string> { "Europe", "Asia", "Africa", "South America" };
            @*await Html.RenderPartialAsync("_ListPartialView");*@ @* streams content to the browser. so improves performance and is therefore recommended in larger projects but its data wont be accessible from the parent view*@
            await Html.RenderPartialAsync("_ListPartialView", itemList
            );
        }
    </div>
    <h2>List title in view: @ViewData["ListTitle"]</h2>
    <a href="#projects">See My Work</a>
</section>

<section id="about">
    <h2>About Me</h2>
    <p>Write a little introduction here...</p>
</section>

<section id="projects">
    <h2>Projects</h2>
    <p>Showcase your cool work here...</p>
</section>
<script>
    document.querySelector("#button-load").addEventListener("click", async function(){
        var response = await fetch("/example/programming-languages");
        var languages = await response.text;
        document.querySelector(".programming-languages-content").innerHTML = languages;
    });
</script>
@*  @{
            <component type="typeof(MemeCard)" render-mode="ServerPrerendered"
                       param-Message="Hello from MVC View!" />
        } *@

