@model IEnumerable<string> //IEnumerable is the parent class of List and its recommended to ref the Interface here as later you may decide to use a Dictionary instead of a list for example and this way you wont have to change the code here

<div class="body">
    <h1 class="h1">This is the home page!</h1>
    <button data-target="programming-languages" type="button" id="button-load" class="button">Load languages list</button>
    <div class="list programming-languages"></div>
    <button data-target="family-list" type="button" id="button-load-family" class="button">Load family list</button>
    <div class="list family-list"></div>
</div>
@foreach(string item in Model)
{
    <h2>@item</h2>
}
@{
    List<Person> people = new()
    { 
        new Person() { FirstName = "ifazinha", LastName = "mullally pimentel" }, 
        new Person() { FirstName = "dengo", LastName = "mullally" }, 
        new Person() { FirstName = "doodles", LastName = "de brito pimentel" } 
    };

    List<Person> people2 = new()
    {
        new Person() { FirstName = "aoifinha", LastName = "mullally pimentel" },
        new Person() { FirstName = "dave", LastName = "mullally" },
        new Person() { FirstName = "duda", LastName = "de brito pimentel" }
    };
}
@await Component.InvokeAsync("Grid", people)
@await Component.InvokeAsync("Grid", people2)
@* ViewCompnent name minus the suffix*@
<vc:grid people="people2"></vc:grid> @*another way to invoke the view component. NB: wont work without @addTagHelper "*, MemeryBank.Api" being added to the _ViewImports.cshtml NB2: if the name of the viewComponent is something like TableListView Component the the taghelper will have to be <vc:table-list></vc:table-list>*@
<vc:grid people="people"></vc:grid>
<script src="~/scripts/HomePageScript.js"></script>